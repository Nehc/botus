import require
import os, telebot, redis
from redminelib import Redmine
from telebot import types
#from shortuuid import uuid
from load_conf import config as cf

token = os.getenv('TG_TOKEN')
if not token: 
    print('bot token needed...')
    quit()

rm_key = os.getenv('READMINE_KEY')
if not rm_key: 
    print('redmine key needed...')
    quit()

bot = telebot.TeleBot(token)
rm = Redmine(cf.redmine.url, key=rm_key)

r = redis.Redis(host=cf.redis.host, 
                port=cf.redis.port, 
                decode_responses=True)

def lrm(id):
    return Redmine(cf.redmine.url, 
                   username=r.get(f'helper:{id}:login'), 
                   password=r.get(f'helper:{id}:pass'))


def mainPhaseInlineKeyboard(id, markup=None):
    l_rm = lrm(id)
    iam = l_rm.user.get('current')
    if not markup: markup = types.InlineKeyboardMarkup()
    my_count = len(iam.issues)
    tome_count = len(l_rm.issue.filter(author_id=iam.id))
    if my_count > 0:
        markup.add(types.InlineKeyboardButton(text=f'–ó–∞–¥–∞—á–∏ –º–Ω–µ ({my_count})', callback_data="tome_tasks"))
    if tome_count > 0:
        markup.add(types.InlineKeyboardButton(text=f'–ú–æ–∏ –∑–∞–¥–∞—á–∏ ({tome_count})', callback_data="my_tasks"))
    return markup


def task_string(task, cd):
    if cd == "tome_tasks":
        author = str(task.author).replace(" -", "")
        return f"[{str(task.created_on)[:10]}] {author}: '{task.subject}' /t{task.id}\n"
    if cd == "my_tasks":
        assigned_to = "–Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞" if not task.assigned_to else "–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: " + str(task.assigned_to).replace(" -", "")
        return f"[{str(task.created_on)[:10]}] '{task.subject}', {assigned_to} /t{task.id}\n"


task_card = lambda task: (
    f'–ó–∞–¥–∞—á–∞ #{task.id} –æ—Ç {str(task.author).replace(" -", "")} {str(task.created_on)[:10]}\n'
    '---------------------------------\n'
    f'–ü—Ä–æ–µ–∫—Ç:\t\t{task.project}\n–°—Ç–∞—Ç—É—Å:\t\t{task.status}\n–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:\t{task.priority}\n'
    f'–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:\t{"–Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞" if not task.assigned_to else str(task.assigned_to).replace(" -", "")}\n'
    '---------------------------------\n'
    f'<b>{task.subject}</b>: {task.description}\n'
)

# bot.forward_message(to_chat_id, from_chat_id, message_id)
# bot.edit_message_text(chat_id=CHAT_WITH_MESSAGE, text=NEW_TEXT, message_id=MESSAGE_TO_EDIT)

check_list = (
    '<b>–£–∂–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –∏ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∏—á–∏:</b>\n'
    '---------------------------------\n'
    '‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è (–ø–∞—Ä–æ–ª—å, –ª–æ–≥–∏–Ω redmine)\t-\tDONE\n'
    '‚úÖ C–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á (–º–æ–∏ –∑–∞–¥–∞—á–∏, –∑–∞–¥–∞—á–∏ –º–Ω–µ)\t-\tDONE\n'
    '‚úÖ –ö–∞—Ä—Ç–æ—á–∫–∞ –∑–∞–¥–∞—á–∏ (–∏–∑ —Å–ø–∏—Å–∫–∞, –ø–æ –Ω–æ–º–µ—Ä—É)\t-\tDONE\n'
    '---------------------------------\n'
    'üõ† –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏\t\t-\tIN PROGRESS\n'
    'üõ† –î–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–∞–Ω–µ–µ —Å–æ–∑–¥–∞–Ω–Ω–æ–π\t\t-\tIN PROGRESS\n'
    'üõ† –í–æ–ø—Ä–æ—Å –∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É\t\t-\tIN PROGRESS\n'
    '---------------------------------\n'
    'üìç –ü–æ–º–µ—Ç–∏—Ç—å –∑–∞–¥–∞—á—É –∫–∞–∫ –∏—Å–ø–æ–ª–Ω–µ–Ω–Ω—É—é\t-\tPLANED\n'
    'üìç –Ω–∞–∑–Ω–∞—á–∏—Ç—å –∑–∞–¥–∞—á—É —Å–µ–±–µ (–∏–ª–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é)\t-\tPLANED\n'
)
    
@bot.message_handler(commands=['start', 'help'])
def send_welcome(message):
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton(text='–û–ø–∏—Å–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞', callback_data="Checklist"))
    if not r.get(f'helper:{message.chat.id}:phase'):
        markup.add(types.InlineKeyboardButton(text='–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è', callback_data="autorisation"))
    elif r.get(f'helper:{message.chat.id}:phase')=='main':
        markup = mainPhaseInlineKeyboard(message.chat.id, markup)
    bot.reply_to(message, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–µ—Ä–≤–∏—Å–Ω—É—é —Å–ª—É–∂–±—É —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∫–æ–º–ø–∞–Ω–∏–∏ –í–æ—Ä–ª–¥—Ç–µ—Ö. '
                          '–ï—Å–ª–∏ –≤—ã –≤–ø–µ—Ä–≤—ã–µ –ø–æ–ª—å–∑—É–µ—Ç–µ—Å—å –±–æ—Ç–æ–º - –Ω—É–∂–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è.', reply_markup=markup)

@bot.message_handler(commands=['t'])
def send_card(message):
    t_num = message.text.replace('/t','')
    l_rm = lrm(message.chat.id)
    task_descr = task_card(l_rm.issue.get(t_num))
    bot.send_message(message.chat.id, task_descr, parse_mode='HTML')

@bot.message_handler(content_types=['text'])
def send_text(message):
    phase = r.get(f'helper:{message.chat.id}:phase')
    
    if phase == 'login':
        
        bot.delete_message(message.chat.id, message.message_id)
        if len(rm.user.filter(name = message.text))>0:
           r.set(f'helper:{message.chat.id}:login',message.text)
           r.set(f'helper:{message.chat.id}:phase','pass') 
           bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –ø–∞—Ä–æ–ª—å –≤ —Å–µ—Ä–≤–∏—Å–Ω–æ–π —Å–ª—É–∂–±–µ:')
        else: 
           bot.send_message(message.chat.id, f'–ù–µ –Ω–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º ({message.text}). ' 
                                              '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑, –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É!')
    elif phase == 'pass':
        
        bot.delete_message(message.chat.id, message.message_id)
        user = r.get(f'helper:{message.chat.id}:login')
        pswd = message.text
        l_rm = Redmine(cf.redmine.url, username=user, password=pswd)
        try:
            if l_rm.user.get('current').id:
                r.set(f'helper:{message.chat.id}:pass',message.text)
                r.set(f'helper:{message.chat.id}:phase','main')
                bot.send_message(message.chat.id, '–°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ.', 
                                 reply_markup=mainPhaseInlineKeyboard(message.chat.id))                   
        except:
            bot.send_message(message.chat.id, '–ü–∞—Ä–æ–ª—å –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç, –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑, '
                                             f'–∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É! {user=}, {pswd=}')
            
    elif phase == 'main':
        
        if message.text.startswith('/t'):
            bot.delete_message(message.chat.id, message.message_id)
            t_num = message.text.replace('/t','')
            l_rm = lrm(message.chat.id)
            task_descr = task_card(l_rm.issue.get(t_num))
            bot.send_message(message.chat.id, task_descr, parse_mode='HTML')
        else:
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton(text='–ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞', callback_data="new_task"))
            markup.add(types.InlineKeyboardButton(text='–î–æ–±–∞–≤–∏—Ç—å –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–π', callback_data="add_remark"))
            markup.add(types.InlineKeyboardButton(text='–°–æ–æ–±—â–µ–Ω–∏–µ', callback_data="message"))
            bot.send_message(message.chat.id, '–ö–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ?', reply_markup=markup)


@bot.callback_query_handler(func=lambda call: True)
def start(call):
    message = call.message
    if call.data == "Checklist":
        bot.send_message(message.chat.id, check_list, parse_mode='HTML')
    elif call.data == "autorisation":
        r.set(f'helper:{message.chat.id}:phase','login')
        bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –ª–æ–≥–∏–Ω –≤ —Å–µ—Ä–≤–∏—Å–Ω–æ–π —Å–ª—É–∂–±–µ:')
    elif call.data == "tome_tasks":
        ans = '–ó–∞–¥–∞—á–∏ –≤–∞–º:\n'
        l_rm = lrm(message.chat.id)
        iam = l_rm.user.get('current')
        for t in iam.issues:
            ans+=task_string(t,call.data)
        bot.send_message(message.chat.id, ans)
    elif call.data == "my_tasks":
        ans = '–í–∞—à–∏ –∑–∞–¥–∞—á–∏:\n'
        l_rm = lrm(message.chat.id)
        iam = l_rm.user.get('current')
        for t in l_rm.issue.filter(author_id=iam.id):
            ans+=task_string(t,call.data)
        bot.send_message(message.chat.id, ans)
    elif call.data == "new_task":
        ...
    elif call.data == "add_remark":
        ...
    elif call.data == "message":
        ...
        

bot.infinity_polling()